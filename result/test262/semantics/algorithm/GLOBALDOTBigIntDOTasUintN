[32mGLOBALDOTBigIntDOTasUintN[0m
[32m- Inst: 20 / 20 (100.00%)[0m
[32m- Cond: 8 / 8 (100.00%)[0m
[32m+ 12237 [-]   : { ... }[0m
[32m+ 12238 [-]   : app __x0__ = (GetArgument argumentsList 0i)[0m
[32m+ 12239 [-]   : let bits = __x0__[0m
[32m+ 12240 [-]   : app __x1__ = (GetArgument argumentsList 1i)[0m
[32m+ 12241 [-]   : let bigint = __x1__[0m
[32m+ 12242 [-]   : app __x2__ = (ToIndex bits)[0m
[32m+ 12243 [[32mT[0m/[32mT[0m[32m]: if (is-completion __x2__) ... else ...[0m
[32m+ 12244 [[32mT[0m/[32mT[0m[32m]: if (= __x2__["Type"] CONST_normal) ... else ...[0m
[32m+ 12245 [-]   : __x2__ = __x2__["Value"][0m
[32m+ 12246 [-]   : return __x2__[0m
[32m+ 12247 [-]   : {}[0m
[32m+ 12248 [-]   : let bits = __x2__[0m
[32m+ 12249 [-]   : app __x3__ = (ToBigInt bigint)[0m
[32m+ 12250 [[32mT[0m/[32mT[0m[32m]: if (is-completion __x3__) ... else ...[0m
[32m+ 12251 [[32mT[0m/[32mT[0m[32m]: if (= __x3__["Type"] CONST_normal) ... else ...[0m
[32m+ 12252 [-]   : __x3__ = __x3__["Value"][0m
[32m+ 12253 [-]   : return __x3__[0m
[32m+ 12254 [-]   : {}[0m
[32m+ 12255 [-]   : let bigint = __x3__[0m
[32m+ 12256 [-]   : return (%% (convert bigint num2bigint ) (** 2n (convert bits num2bigint )))[0m
