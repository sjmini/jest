[32mOrdinaryGetOwnProperty[0m
[32m- Inst: 21 / 21 (100.00%)[0m
[32m- Cond: 4 / 4 (100.00%)[0m
[32m+ 20523 [-]   : { ... }[0m
[32m+ 20524 [-]   : app __x0__ = (IsPropertyKey P)[0m
[32m+ 20525 [-]   : assert (= __x0__ true)[0m
[32m+ 20526 [[32mT[0m/[32mT[0m[32m]: if (= O["SubMap"][P] absent) ... else ...[0m
[32m+ 20527 [-]   : return undefined[0m
[32m+ 20528 [-]   : {}[0m
[32m+ 20529 [-]   : let D = (new PropertyDescriptor("SubMap" -> (new SubMap())))[0m
[32m+ 20530 [-]   : let X = O["SubMap"][P][0m
[32m+ 20531 [-]   : app __x1__ = (IsDataDescriptor X)[0m
[32m+ 20532 [[32mT[0m/[32mT[0m[32m]: if __x1__ ... else ...[0m
[32m+ 20533 [-]   : { ... }[0m
[32m+ 20534 [-]   : D["Value"] = X["Value"][0m
[32m+ 20535 [-]   : D["Writable"] = X["Writable"][0m
[32m+ 20536 [-]   : { ... }[0m
[32m+ 20537 [-]   : app __x2__ = (IsAccessorDescriptor X)[0m
[32m+ 20538 [-]   : assert __x2__[0m
[32m+ 20539 [-]   : D["Get"] = X["Get"][0m
[32m+ 20540 [-]   : D["Set"] = X["Set"][0m
[32m+ 20541 [-]   : D["Enumerable"] = X["Enumerable"][0m
[32m+ 20542 [-]   : D["Configurable"] = X["Configurable"][0m
[32m+ 20543 [-]   : return D[0m
