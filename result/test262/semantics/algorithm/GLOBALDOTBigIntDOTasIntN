[32mGLOBALDOTBigIntDOTasIntN[0m
[32m- Inst: 23 / 23 (100.00%)[0m
[32m- Cond: 10 / 10 (100.00%)[0m
[32m+ 12214 [-]   : { ... }[0m
[32m+ 12215 [-]   : app __x0__ = (GetArgument argumentsList 0i)[0m
[32m+ 12216 [-]   : let bits = __x0__[0m
[32m+ 12217 [-]   : app __x1__ = (GetArgument argumentsList 1i)[0m
[32m+ 12218 [-]   : let bigint = __x1__[0m
[32m+ 12219 [-]   : app __x2__ = (ToIndex bits)[0m
[32m+ 12220 [[32mT[0m/[32mT[0m[32m]: if (is-completion __x2__) ... else ...[0m
[32m+ 12221 [[32mT[0m/[32mT[0m[32m]: if (= __x2__["Type"] CONST_normal) ... else ...[0m
[32m+ 12222 [-]   : __x2__ = __x2__["Value"][0m
[32m+ 12223 [-]   : return __x2__[0m
[32m+ 12224 [-]   : {}[0m
[32m+ 12225 [-]   : let bits = __x2__[0m
[32m+ 12226 [-]   : app __x3__ = (ToBigInt bigint)[0m
[32m+ 12227 [[32mT[0m/[32mT[0m[32m]: if (is-completion __x3__) ... else ...[0m
[32m+ 12228 [[32mT[0m/[32mT[0m[32m]: if (= __x3__["Type"] CONST_normal) ... else ...[0m
[32m+ 12229 [-]   : __x3__ = __x3__["Value"][0m
[32m+ 12230 [-]   : return __x3__[0m
[32m+ 12231 [-]   : {}[0m
[32m+ 12232 [-]   : let bigint = __x3__[0m
[32m+ 12233 [-]   : let mod = (%% bigint (** 2n bits))[0m
[32m+ 12234 [[32mT[0m/[32mT[0m[32m]: if (! (< mod (** 2n (- bits 1.0)))) ... else ...[0m
[32m+ 12235 [-]   : return (- mod (** 2n bits))[0m
[32m+ 12236 [-]   : return mod[0m
