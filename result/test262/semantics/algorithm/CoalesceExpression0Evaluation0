[32mCoalesceExpression0Evaluation0[0m
[32m- Inst: 25 / 25 (100.00%)[0m
[32m- Cond: 10 / 10 (100.00%)[0m
[32m+ 7106  [-]   : { ... }[0m
[32m+ 7107  [-]   : access __x0__ = (CoalesceExpressionHead "Evaluation")[0m
[32m+ 7108  [-]   : let lref = __x0__[0m
[32m+ 7109  [-]   : app __x1__ = (GetValue lref)[0m
[32m+ 7110  [[32mT[0m/[32mT[0m[32m]: if (is-completion __x1__) ... else ...[0m
[32m+ 7111  [[32mT[0m/[32mT[0m[32m]: if (= __x1__["Type"] CONST_normal) ... else ...[0m
[32m+ 7112  [-]   : __x1__ = __x1__["Value"][0m
[32m+ 7113  [-]   : return __x1__[0m
[32m+ 7114  [-]   : {}[0m
[32m+ 7115  [-]   : let lval = __x1__[0m
[32m+ 7116  [[32mT[0m/[32mT[0m[32m]: if (|| (= lval undefined) (= lval null)) ... else ...[0m
[32m+ 7117  [-]   : { ... }[0m
[32m+ 7118  [-]   : access __x2__ = (BitwiseORExpression "Evaluation")[0m
[32m+ 7119  [-]   : let rref = __x2__[0m
[32m+ 7120  [-]   : app __x3__ = (GetValue rref)[0m
[32m+ 7121  [[32mT[0m/[32mT[0m[32m]: if (is-completion __x3__) ... else ...[0m
[32m+ 7122  [[32mT[0m/[32mT[0m[32m]: if (= __x3__["Type"] CONST_normal) ... else ...[0m
[32m+ 7123  [-]   : __x3__ = __x3__["Value"][0m
[32m+ 7124  [-]   : return __x3__[0m
[32m+ 7125  [-]   : {}[0m
[32m+ 7126  [-]   : app __x4__ = (WrapCompletion __x3__)[0m
[32m+ 7127  [-]   : return __x4__[0m
[32m+ 7128  [-]   : { ... }[0m
[32m+ 7129  [-]   : app __x5__ = (WrapCompletion lval)[0m
[32m+ 7130  [-]   : return __x5__[0m
