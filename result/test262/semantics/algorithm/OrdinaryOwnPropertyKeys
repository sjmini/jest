[33mOrdinaryOwnPropertyKeys[0m
[33m- Inst: 54 / 55 (98.18%)[0m
[33m- Cond: 18 / 20 (90.00%)[0m
[32m+ 20757 [-]   : { ... }[0m
[32m+ 20758 [-]   : let keys = (new [])[0m
[32m+ 20759 [-]   : let i = 0i[0m
[32m+ 20760 [-]   : let list = (map-keys O["SubMap"])[0m
[32m+ 20761 [-]   : let arrayIndexKeys = (new [])[0m
[32m+ 20762 [-]   : let stringKeys = (new [])[0m
[32m+ 20763 [-]   : let symbolKeys = (new [])[0m
[32m+ 20764 [-]   : len = list["length"][0m
[32m+ 20765 [[32mT[0m/[32mT[0m[32m]: while (< i len) { ... }[0m
[32m+ 20766 [-]   : { ... }[0m
[32m+ 20767 [-]   : let P = list[i][0m
[32m+ 20768 [-]   : app T = (Type P)[0m
[32m+ 20769 [[32mT[0m/[32mT[0m[32m]: if (= T "String") ... else ...[0m
[32m+ 20770 [-]   : { ... }[0m
[32m+ 20771 [-]   : app isArrayIndex = (IsArrayIndex P)[0m
[32m+ 20772 [[32mT[0m/[32mT[0m[32m]: if isArrayIndex ... else ...[0m
[32m+ 20773 [-]   : { ... }[0m
[32m+ 20774 [-]   : app n = (ToInteger P)[0m
[32m+ 20775 [[32mT[0m/[31mF[0m[32m]: if (is-completion n) ... else ...[0m
[32m+ 20776 [-]   : n = n["Value"][0m
[31m- 20777 [-]   : {}[0m
[32m+ 20778 [-]   : append n -> arrayIndexKeys[0m
[32m+ 20779 [-]   : append P -> stringKeys[0m
[32m+ 20780 [-]   : append P -> symbolKeys[0m
[32m+ 20781 [-]   : i = (+ i 1i)[0m
[32m+ 20782 [-]   : len = arrayIndexKeys["length"][0m
[32m+ 20783 [[32mT[0m/[32mT[0m[32m]: while (< 0i len) { ... }[0m
[32m+ 20784 [-]   : { ... }[0m
[32m+ 20785 [-]   : let min = 0i[0m
[32m+ 20786 [-]   : let j = 1i[0m
[32m+ 20787 [[32mT[0m/[32mT[0m[32m]: while (< j len) { ... }[0m
[32m+ 20788 [-]   : { ... }[0m
[32m+ 20789 [[32mT[0m/[32mT[0m[32m]: if (< arrayIndexKeys[j] arrayIndexKeys[min]) ... else ...[0m
[32m+ 20790 [-]   : min = j[0m
[32m+ 20791 [-]   : {}[0m
[32m+ 20792 [-]   : j = (+ j 1i)[0m
[32m+ 20793 [-]   : app P = (ToString (pop arrayIndexKeys min))[0m
[32m+ 20794 [[31mF[0m/[32mT[0m[32m]: if (is-completion P) ... else ...[0m
[32m+ 20795 [-]   : P = P["Value"][0m
[32m+ 20796 [-]   : {}[0m
[32m+ 20797 [-]   : append P -> keys[0m
[32m+ 20798 [-]   : len = (- len 1i)[0m
[32m+ 20799 [-]   : i = 0i[0m
[32m+ 20800 [-]   : len = stringKeys["length"][0m
[32m+ 20801 [[32mT[0m/[32mT[0m[32m]: while (< i len) { ... }[0m
[32m+ 20802 [-]   : { ... }[0m
[32m+ 20803 [-]   : append stringKeys[i] -> keys[0m
[32m+ 20804 [-]   : i = (+ i 1i)[0m
[32m+ 20805 [-]   : i = 0i[0m
[32m+ 20806 [-]   : len = symbolKeys["length"][0m
[32m+ 20807 [[32mT[0m/[32mT[0m[32m]: while (< i len) { ... }[0m
[32m+ 20808 [-]   : { ... }[0m
[32m+ 20809 [-]   : append symbolKeys[i] -> keys[0m
[32m+ 20810 [-]   : i = (+ i 1i)[0m
[32m+ 20811 [-]   : return keys[0m
