[32mMultiplicativeExpression1Evaluation0[0m
[32m- Inst: 58 / 58 (100.00%)[0m
[32m- Cond: 22 / 22 (100.00%)[0m
[32m+ 445   [-]   : { ... }[0m
[32m+ 446   [-]   : access __x0__ = (MultiplicativeExpression "Evaluation")[0m
[32m+ 447   [-]   : let left = __x0__[0m
[32m+ 448   [-]   : app __x1__ = (GetValue left)[0m
[32m+ 449   [[32mT[0m/[32mT[0m[32m]: if (is-completion __x1__) ... else ...[0m
[32m+ 450   [[32mT[0m/[32mT[0m[32m]: if (= __x1__["Type"] CONST_normal) ... else ...[0m
[32m+ 451   [-]   : __x1__ = __x1__["Value"][0m
[32m+ 452   [-]   : return __x1__[0m
[32m+ 453   [-]   : {}[0m
[32m+ 454   [-]   : let leftValue = __x1__[0m
[32m+ 455   [-]   : access __x2__ = (ExponentiationExpression "Evaluation")[0m
[32m+ 456   [-]   : let right = __x2__[0m
[32m+ 457   [-]   : app __x3__ = (GetValue right)[0m
[32m+ 458   [[32mT[0m/[32mT[0m[32m]: if (is-completion __x3__) ... else ...[0m
[32m+ 459   [[32mT[0m/[32mT[0m[32m]: if (= __x3__["Type"] CONST_normal) ... else ...[0m
[32m+ 460   [-]   : __x3__ = __x3__["Value"][0m
[32m+ 461   [-]   : return __x3__[0m
[32m+ 462   [-]   : {}[0m
[32m+ 463   [-]   : let rightValue = __x3__[0m
[32m+ 464   [-]   : app __x4__ = (ToNumeric leftValue)[0m
[32m+ 465   [[32mT[0m/[32mT[0m[32m]: if (is-completion __x4__) ... else ...[0m
[32m+ 466   [[32mT[0m/[32mT[0m[32m]: if (= __x4__["Type"] CONST_normal) ... else ...[0m
[32m+ 467   [-]   : __x4__ = __x4__["Value"][0m
[32m+ 468   [-]   : return __x4__[0m
[32m+ 469   [-]   : {}[0m
[32m+ 470   [-]   : let lnum = __x4__[0m
[32m+ 471   [-]   : app __x5__ = (ToNumeric rightValue)[0m
[32m+ 472   [[32mT[0m/[32mT[0m[32m]: if (is-completion __x5__) ... else ...[0m
[32m+ 473   [[32mT[0m/[32mT[0m[32m]: if (= __x5__["Type"] CONST_normal) ... else ...[0m
[32m+ 474   [-]   : __x5__ = __x5__["Value"][0m
[32m+ 475   [-]   : return __x5__[0m
[32m+ 476   [-]   : {}[0m
[32m+ 477   [-]   : let rnum = __x5__[0m
[32m+ 478   [-]   : app __x6__ = (Type lnum)[0m
[32m+ 479   [-]   : app __x7__ = (Type rnum)[0m
[32m+ 480   [[32mT[0m/[32mT[0m[32m]: if (! (= __x6__ __x7__)) ... else ...[0m
[32m+ 481   [-]   : { ... }[0m
[32m+ 482   [-]   : app __x8__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeErrorPrototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))[0m
[32m+ 483   [-]   : return __x8__[0m
[32m+ 484   [-]   : {}[0m
[32m+ 485   [-]   : app __x9__ = (Type lnum)[0m
[32m+ 486   [-]   : let T = __x9__[0m
[32m+ 487   [[32mT[0m/[32mT[0m[32m]: if (= MultiplicativeOperator "*") ... else ...[0m
[32m+ 488   [-]   : { ... }[0m
[32m+ 489   [-]   : app result = (PRIMITIVES[T]["multiply"] lnum rnum)[0m
[32m+ 490   [-]   : app wrapped = (WrapCompletion result)[0m
[32m+ 491   [-]   : return wrapped[0m
[32m+ 492   [-]   : {}[0m
[32m+ 493   [[32mT[0m/[32mT[0m[32m]: if (= MultiplicativeOperator "/") ... else ...[0m
[32m+ 494   [-]   : { ... }[0m
[32m+ 495   [-]   : app result = (PRIMITIVES[T]["divide"] lnum rnum)[0m
[32m+ 496   [-]   : app wrapped = (WrapCompletion result)[0m
[32m+ 497   [-]   : return wrapped[0m
[32m+ 498   [-]   : { ... }[0m
[32m+ 499   [-]   : assert (= MultiplicativeOperator "%")[0m
[32m+ 500   [-]   : app result = (PRIMITIVES[T]["remainder"] lnum rnum)[0m
[32m+ 501   [-]   : app wrapped = (WrapCompletion result)[0m
[32m+ 502   [-]   : return wrapped[0m
